//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace ASoft.Configuration
{
    
    
    /// <summary>
    /// The ASoftConfig Configuration Section.
    /// </summary>
    public partial class ASoftConfig : global::System.Configuration.ConfigurationSection
    {
        
        #region Singleton Instance
        /// <summary>
        /// The XML name of the ASoftConfig Configuration Section.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        internal const string ASoftConfigSectionName = "asoftConfig";
        
        /// <summary>
        /// The XML path of the ASoftConfig Configuration Section.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        internal const string ASoftConfigSectionPath = "asoftConfig";
        
        /// <summary>
        /// Gets the ASoftConfig instance.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        public static global::ASoft.Configuration.ASoftConfig Instance
        {
            get
            {
                return ((global::ASoft.Configuration.ASoftConfig)(global::System.Configuration.ConfigurationManager.GetSection(global::ASoft.Configuration.ASoftConfig.ASoftConfigSectionPath)));
            }
        }
        #endregion
        
        #region Xmlns Property
        /// <summary>
        /// The XML name of the <see cref="Xmlns"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        internal const string XmlnsPropertyName = "xmlns";
        
        /// <summary>
        /// Gets the XML namespace of this Configuration Section.
        /// </summary>
        /// <remarks>
        /// This property makes sure that if the configuration file contains the XML namespace,
        /// the parser doesn't throw an exception because it encounters the unknown "xmlns" attribute.
        /// </remarks>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::ASoft.Configuration.ASoftConfig.XmlnsPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public string Xmlns
        {
            get
            {
                return ((string)(base[global::ASoft.Configuration.ASoftConfig.XmlnsPropertyName]));
            }
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region EventQueue Property
        /// <summary>
        /// The XML name of the <see cref="EventQueue"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        internal const string EventQueuePropertyName = "eventQueue";
        
        /// <summary>
        /// Gets or sets the EventQueue.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        [global::System.ComponentModel.DescriptionAttribute("The EventQueue.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::ASoft.Configuration.ASoftConfig.EventQueuePropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual global::ASoft.Configuration.MessageQueueConfigurationElement EventQueue
        {
            get
            {
                return ((global::ASoft.Configuration.MessageQueueConfigurationElement)(base[global::ASoft.Configuration.ASoftConfig.EventQueuePropertyName]));
            }
            set
            {
                base[global::ASoft.Configuration.ASoftConfig.EventQueuePropertyName] = value;
            }
        }
        #endregion
        
        #region CommandQueue Property
        /// <summary>
        /// The XML name of the <see cref="CommandQueue"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        internal const string CommandQueuePropertyName = "commandQueue";
        
        /// <summary>
        /// Gets or sets the CommandQueue.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        [global::System.ComponentModel.DescriptionAttribute("The CommandQueue.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::ASoft.Configuration.ASoftConfig.CommandQueuePropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual global::ASoft.Configuration.MessageQueueConfigurationElement CommandQueue
        {
            get
            {
                return ((global::ASoft.Configuration.MessageQueueConfigurationElement)(base[global::ASoft.Configuration.ASoftConfig.CommandQueuePropertyName]));
            }
            set
            {
                base[global::ASoft.Configuration.ASoftConfig.CommandQueuePropertyName] = value;
            }
        }
        #endregion
        
        #region Services Property
        /// <summary>
        /// The XML name of the <see cref="Services"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        internal const string ServicesPropertyName = "services";
        
        /// <summary>
        /// Gets or sets the Services.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        [global::System.ComponentModel.DescriptionAttribute("The Services.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::ASoft.Configuration.ASoftConfig.ServicesPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual global::ASoft.Configuration.ServiceElementCollection Services
        {
            get
            {
                return ((global::ASoft.Configuration.ServiceElementCollection)(base[global::ASoft.Configuration.ASoftConfig.ServicesPropertyName]));
            }
            set
            {
                base[global::ASoft.Configuration.ASoftConfig.ServicesPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace ASoft.Configuration
{
    
    
    /// <summary>
    /// The MessageQueueConfigurationElement Configuration Element.
    /// </summary>
    public partial class MessageQueueConfigurationElement : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region ConnectionUri Property
        /// <summary>
        /// The XML name of the <see cref="ConnectionUri"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        internal const string ConnectionUriPropertyName = "connectionUri";
        
        /// <summary>
        /// Gets or sets the ConnectionUri.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        [global::System.ComponentModel.DescriptionAttribute("The ConnectionUri.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::ASoft.Configuration.MessageQueueConfigurationElement.ConnectionUriPropertyName, IsRequired=true, IsKey=true, IsDefaultCollection=false)]
        public virtual string ConnectionUri
        {
            get
            {
                return ((string)(base[global::ASoft.Configuration.MessageQueueConfigurationElement.ConnectionUriPropertyName]));
            }
            set
            {
                base[global::ASoft.Configuration.MessageQueueConfigurationElement.ConnectionUriPropertyName] = value;
            }
        }
        #endregion
        
        #region ExchangeName Property
        /// <summary>
        /// The XML name of the <see cref="ExchangeName"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        internal const string ExchangeNamePropertyName = "exchangeName";
        
        /// <summary>
        /// Gets or sets the ExchangeName.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        [global::System.ComponentModel.DescriptionAttribute("The ExchangeName.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::ASoft.Configuration.MessageQueueConfigurationElement.ExchangeNamePropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual string ExchangeName
        {
            get
            {
                return ((string)(base[global::ASoft.Configuration.MessageQueueConfigurationElement.ExchangeNamePropertyName]));
            }
            set
            {
                base[global::ASoft.Configuration.MessageQueueConfigurationElement.ExchangeNamePropertyName] = value;
            }
        }
        #endregion
        
        #region QueueName Property
        /// <summary>
        /// The XML name of the <see cref="QueueName"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        internal const string QueueNamePropertyName = "queueName";
        
        /// <summary>
        /// Gets or sets the QueueName.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        [global::System.ComponentModel.DescriptionAttribute("The QueueName.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::ASoft.Configuration.MessageQueueConfigurationElement.QueueNamePropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual string QueueName
        {
            get
            {
                return ((string)(base[global::ASoft.Configuration.MessageQueueConfigurationElement.QueueNamePropertyName]));
            }
            set
            {
                base[global::ASoft.Configuration.MessageQueueConfigurationElement.QueueNamePropertyName] = value;
            }
        }
        #endregion
    }
}
namespace ASoft.Configuration
{
    
    
    /// <summary>
    /// A collection of ServiceElement instances.
    /// </summary>
    [global::System.Configuration.ConfigurationCollectionAttribute(typeof(global::ASoft.Configuration.ServiceElement), CollectionType=global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate, AddItemName=global::ASoft.Configuration.ServiceElementCollection.ServiceElementPropertyName)]
    public partial class ServiceElementCollection : global::System.Configuration.ConfigurationElementCollection, global::System.Collections.Generic.ICollection<global::ASoft.Configuration.ServiceElement>
    {
        
        #region Constants
        /// <summary>
        /// The XML name of the individual <see cref="global::ASoft.Configuration.ServiceElement"/> instances in this collection.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        internal const string ServiceElementPropertyName = "service";
        #endregion
        
        #region Overrides
        /// <summary>
        /// Gets the type of the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <returns>The <see cref="global::System.Configuration.ConfigurationElementCollectionType"/> of this collection.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        public override global::System.Configuration.ConfigurationElementCollectionType CollectionType
        {
            get
            {
                return global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate;
            }
        }
        
        /// <summary>
        /// Gets the name used to identify this collection of elements
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        protected override string ElementName
        {
            get
            {
                return global::ASoft.Configuration.ServiceElementCollection.ServiceElementPropertyName;
            }
        }
        
        /// <summary>
        /// Indicates whether the specified <see cref="global::System.Configuration.ConfigurationElement"/> exists in the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="elementName">The name of the element to verify.</param>
        /// <returns>
        /// <see langword="true"/> if the element exists in the collection; otherwise, <see langword="false"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        protected override bool IsElementName(string elementName)
        {
            return (elementName == global::ASoft.Configuration.ServiceElementCollection.ServiceElementPropertyName);
        }
        
        /// <summary>
        /// Gets the element key for the specified configuration element.
        /// </summary>
        /// <param name="element">The <see cref="global::System.Configuration.ConfigurationElement"/> to return the key for.</param>
        /// <returns>
        /// An <see cref="object"/> that acts as the key for the specified <see cref="global::System.Configuration.ConfigurationElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        protected override object GetElementKey(global::System.Configuration.ConfigurationElement element)
        {
            return ((global::ASoft.Configuration.ServiceElement)(element)).Type;
        }
        
        /// <summary>
        /// Creates a new <see cref="global::ASoft.Configuration.ServiceElement"/>.
        /// </summary>
        /// <returns>
        /// A new <see cref="global::ASoft.Configuration.ServiceElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        protected override global::System.Configuration.ConfigurationElement CreateNewElement()
        {
            return new global::ASoft.Configuration.ServiceElement();
        }
        #endregion
        
        #region Indexer
        /// <summary>
        /// Gets the <see cref="global::ASoft.Configuration.ServiceElement"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::ASoft.Configuration.ServiceElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        public global::ASoft.Configuration.ServiceElement this[int index]
        {
            get
            {
                return ((global::ASoft.Configuration.ServiceElement)(base.BaseGet(index)));
            }
        }
        
        /// <summary>
        /// Gets the <see cref="global::ASoft.Configuration.ServiceElement"/> with the specified key.
        /// </summary>
        /// <param name="type">The key of the <see cref="global::ASoft.Configuration.ServiceElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        public global::ASoft.Configuration.ServiceElement this[object type]
        {
            get
            {
                return ((global::ASoft.Configuration.ServiceElement)(base.BaseGet(type)));
            }
        }
        #endregion
        
        #region Add
        /// <summary>
        /// Adds the specified <see cref="global::ASoft.Configuration.ServiceElement"/> to the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="service">The <see cref="global::ASoft.Configuration.ServiceElement"/> to add.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        public void Add(global::ASoft.Configuration.ServiceElement service)
        {
            base.BaseAdd(service);
        }
        #endregion
        
        #region Remove
        /// <summary>
        /// Removes the specified <see cref="global::ASoft.Configuration.ServiceElement"/> from the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="service">The <see cref="global::ASoft.Configuration.ServiceElement"/> to remove.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        public void Remove(global::ASoft.Configuration.ServiceElement service)
        {
            base.BaseRemove(this.GetElementKey(service));
        }
        #endregion
        
        #region GetItem
        /// <summary>
        /// Gets the <see cref="global::ASoft.Configuration.ServiceElement"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::ASoft.Configuration.ServiceElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        public global::ASoft.Configuration.ServiceElement GetItemAt(int index)
        {
            return ((global::ASoft.Configuration.ServiceElement)(base.BaseGet(index)));
        }
        
        /// <summary>
        /// Gets the <see cref="global::ASoft.Configuration.ServiceElement"/> with the specified key.
        /// </summary>
        /// <param name="type">The key of the <see cref="global::ASoft.Configuration.ServiceElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        public global::ASoft.Configuration.ServiceElement GetItemByKey(string type)
        {
            return ((global::ASoft.Configuration.ServiceElement)(base.BaseGet(((object)(type)))));
        }
        #endregion
        
        #region ICollection
        /// <summary>
        /// Removes all items from the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        public void Clear()
        {
            base.BaseClear();
        }
        
        /// <summary>
        /// Determines whether the <see cref="global::System.Configuration.ConfigurationElementCollection"/> contains a specific value.
        /// </summary>
        /// <param name="service">The object to locate in the <see cref="global::ASoft.Configuration.ServiceElement"/>.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        public bool Contains(global::ASoft.Configuration.ServiceElement service)
        {
            return (base.BaseIndexOf(service) >= 0);
        }
        
        /// <summary>
        /// Copies the elements of the <see cref="global::System.Configuration.ConfigurationElementCollection"/> to an <see cref="System.Array"/>, starting at a particular <see cref="System.Array"/> index.
        /// </summary>
        /// <param name="array">The one-dimensional <see cref="System.Array"/> that is the destination of the elements copied from <see cref="global::System.Configuration.ConfigurationElementCollection"/>. The <see cref="System.Array"/> must have zero-based indexing.</param>
        /// <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        public void CopyTo(global::ASoft.Configuration.ServiceElement[] array, int arrayIndex)
        {
            base.CopyTo(array, arrayIndex);
        }
        
        /// <summary>
        /// Gets a value indicating whether the <see cref="global::System.Configuration.ConfigurationElementCollection"/> is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        bool global::System.Collections.Generic.ICollection<global::ASoft.Configuration.ServiceElement>.IsReadOnly
        {
            get
            {
                return this.IsReadOnly();
            }
        }
        
        /// <summary>
        /// Removes the first occurrence of a specific object from the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="item">The <see cref="global::ASoft.Configuration.ServiceElement"/> to remove.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        bool global::System.Collections.Generic.ICollection<global::ASoft.Configuration.ServiceElement>.Remove(global::ASoft.Configuration.ServiceElement item)
        {
            int idx = base.BaseIndexOf(item);
            if ((idx == -1))
            {
                return false;
            }
            base.BaseRemoveAt(idx);
            return true;
        }
        
        /// <summary>
        /// Returns an enumerator that iterates through the collection.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        public new global::System.Collections.Generic.IEnumerator<global::ASoft.Configuration.ServiceElement> GetEnumerator()
        {
            global::System.Collections.Generic.List<global::ASoft.Configuration.ServiceElement> list = new global::System.Collections.Generic.List<global::ASoft.Configuration.ServiceElement>(base.Count);
            global::System.Collections.IEnumerator iter = base.GetEnumerator();
            for (; iter.MoveNext(); )
            {
                list.Add(((global::ASoft.Configuration.ServiceElement)(iter.Current)));
            }
            return list.GetEnumerator();
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
    }
}
namespace ASoft.Configuration
{
    
    
    /// <summary>
    /// The ServiceElement Configuration Element.
    /// </summary>
    public partial class ServiceElement : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Type Property
        /// <summary>
        /// The XML name of the <see cref="Type"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        internal const string TypePropertyName = "type";
        
        /// <summary>
        /// Gets or sets the Type.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        [global::System.ComponentModel.DescriptionAttribute("The Type.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::ASoft.Configuration.ServiceElement.TypePropertyName, IsRequired=true, IsKey=true, IsDefaultCollection=false)]
        public virtual string Type
        {
            get
            {
                return ((string)(base[global::ASoft.Configuration.ServiceElement.TypePropertyName]));
            }
            set
            {
                base[global::ASoft.Configuration.ServiceElement.TypePropertyName] = value;
            }
        }
        #endregion
        
        #region Settings Property
        /// <summary>
        /// The XML name of the <see cref="Settings"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        internal const string SettingsPropertyName = "settings";
        
        /// <summary>
        /// Gets or sets the Settings.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        [global::System.ComponentModel.DescriptionAttribute("The Settings.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::ASoft.Configuration.ServiceElement.SettingsPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual global::ASoft.Configuration.SettingElementCollection Settings
        {
            get
            {
                return ((global::ASoft.Configuration.SettingElementCollection)(base[global::ASoft.Configuration.ServiceElement.SettingsPropertyName]));
            }
            set
            {
                base[global::ASoft.Configuration.ServiceElement.SettingsPropertyName] = value;
            }
        }
        #endregion
        
        #region LocalCommandQueue Property
        /// <summary>
        /// The XML name of the <see cref="LocalCommandQueue"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        internal const string LocalCommandQueuePropertyName = "localCommandQueue";
        
        /// <summary>
        /// Gets or sets the LocalCommandQueue.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        [global::System.ComponentModel.DescriptionAttribute("The LocalCommandQueue.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::ASoft.Configuration.ServiceElement.LocalCommandQueuePropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual global::ASoft.Configuration.MessageQueueConfigurationElement LocalCommandQueue
        {
            get
            {
                return ((global::ASoft.Configuration.MessageQueueConfigurationElement)(base[global::ASoft.Configuration.ServiceElement.LocalCommandQueuePropertyName]));
            }
            set
            {
                base[global::ASoft.Configuration.ServiceElement.LocalCommandQueuePropertyName] = value;
            }
        }
        #endregion
        
        #region LocalEventQueue Property
        /// <summary>
        /// The XML name of the <see cref="LocalEventQueue"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        internal const string LocalEventQueuePropertyName = "localEventQueue";
        
        /// <summary>
        /// Gets or sets the LocalEventQueue.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        [global::System.ComponentModel.DescriptionAttribute("The LocalEventQueue.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::ASoft.Configuration.ServiceElement.LocalEventQueuePropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual global::ASoft.Configuration.MessageQueueConfigurationElement LocalEventQueue
        {
            get
            {
                return ((global::ASoft.Configuration.MessageQueueConfigurationElement)(base[global::ASoft.Configuration.ServiceElement.LocalEventQueuePropertyName]));
            }
            set
            {
                base[global::ASoft.Configuration.ServiceElement.LocalEventQueuePropertyName] = value;
            }
        }
        #endregion
    }
}
namespace ASoft.Configuration
{
    
    
    /// <summary>
    /// A collection of SettingElement instances.
    /// </summary>
    [global::System.Configuration.ConfigurationCollectionAttribute(typeof(global::ASoft.Configuration.SettingElement), CollectionType=global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate, AddItemName=global::ASoft.Configuration.SettingElementCollection.SettingElementPropertyName)]
    public partial class SettingElementCollection : global::System.Configuration.ConfigurationElementCollection
    {
        
        #region Constants
        /// <summary>
        /// The XML name of the individual <see cref="global::ASoft.Configuration.SettingElement"/> instances in this collection.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        internal const string SettingElementPropertyName = "settingElement";
        #endregion
        
        #region Overrides
        /// <summary>
        /// Gets the type of the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <returns>The <see cref="global::System.Configuration.ConfigurationElementCollectionType"/> of this collection.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        public override global::System.Configuration.ConfigurationElementCollectionType CollectionType
        {
            get
            {
                return global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate;
            }
        }
        
        /// <summary>
        /// Gets the name used to identify this collection of elements
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        protected override string ElementName
        {
            get
            {
                return global::ASoft.Configuration.SettingElementCollection.SettingElementPropertyName;
            }
        }
        
        /// <summary>
        /// Indicates whether the specified <see cref="global::System.Configuration.ConfigurationElement"/> exists in the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="elementName">The name of the element to verify.</param>
        /// <returns>
        /// <see langword="true"/> if the element exists in the collection; otherwise, <see langword="false"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        protected override bool IsElementName(string elementName)
        {
            return (elementName == global::ASoft.Configuration.SettingElementCollection.SettingElementPropertyName);
        }
        
        /// <summary>
        /// Gets the element key for the specified configuration element.
        /// </summary>
        /// <param name="element">The <see cref="global::System.Configuration.ConfigurationElement"/> to return the key for.</param>
        /// <returns>
        /// An <see cref="object"/> that acts as the key for the specified <see cref="global::System.Configuration.ConfigurationElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        protected override object GetElementKey(global::System.Configuration.ConfigurationElement element)
        {
            return ((global::ASoft.Configuration.SettingElement)(element)).Key;
        }
        
        /// <summary>
        /// Creates a new <see cref="global::ASoft.Configuration.SettingElement"/>.
        /// </summary>
        /// <returns>
        /// A new <see cref="global::ASoft.Configuration.SettingElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        protected override global::System.Configuration.ConfigurationElement CreateNewElement()
        {
            return new global::ASoft.Configuration.SettingElement();
        }
        #endregion
        
        #region Indexer
        /// <summary>
        /// Gets the <see cref="global::ASoft.Configuration.SettingElement"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::ASoft.Configuration.SettingElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        public global::ASoft.Configuration.SettingElement this[int index]
        {
            get
            {
                return ((global::ASoft.Configuration.SettingElement)(base.BaseGet(index)));
            }
        }
        
        /// <summary>
        /// Gets the <see cref="global::ASoft.Configuration.SettingElement"/> with the specified key.
        /// </summary>
        /// <param name="key">The key of the <see cref="global::ASoft.Configuration.SettingElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        public global::ASoft.Configuration.SettingElement this[object key]
        {
            get
            {
                return ((global::ASoft.Configuration.SettingElement)(base.BaseGet(key)));
            }
        }
        #endregion
        
        #region Add
        /// <summary>
        /// Adds the specified <see cref="global::ASoft.Configuration.SettingElement"/> to the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="settingElement">The <see cref="global::ASoft.Configuration.SettingElement"/> to add.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        public void Add(global::ASoft.Configuration.SettingElement settingElement)
        {
            base.BaseAdd(settingElement);
        }
        #endregion
        
        #region Remove
        /// <summary>
        /// Removes the specified <see cref="global::ASoft.Configuration.SettingElement"/> from the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="settingElement">The <see cref="global::ASoft.Configuration.SettingElement"/> to remove.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        public void Remove(global::ASoft.Configuration.SettingElement settingElement)
        {
            base.BaseRemove(this.GetElementKey(settingElement));
        }
        #endregion
        
        #region GetItem
        /// <summary>
        /// Gets the <see cref="global::ASoft.Configuration.SettingElement"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::ASoft.Configuration.SettingElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        public global::ASoft.Configuration.SettingElement GetItemAt(int index)
        {
            return ((global::ASoft.Configuration.SettingElement)(base.BaseGet(index)));
        }
        
        /// <summary>
        /// Gets the <see cref="global::ASoft.Configuration.SettingElement"/> with the specified key.
        /// </summary>
        /// <param name="key">The key of the <see cref="global::ASoft.Configuration.SettingElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        public global::ASoft.Configuration.SettingElement GetItemByKey(string key)
        {
            return ((global::ASoft.Configuration.SettingElement)(base.BaseGet(((object)(key)))));
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
    }
}
namespace ASoft.Configuration
{
    
    
    /// <summary>
    /// The SettingElement Configuration Element.
    /// </summary>
    public partial class SettingElement : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Key Property
        /// <summary>
        /// The XML name of the <see cref="Key"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        internal const string KeyPropertyName = "key";
        
        /// <summary>
        /// Gets or sets the Key.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        [global::System.ComponentModel.DescriptionAttribute("The Key.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::ASoft.Configuration.SettingElement.KeyPropertyName, IsRequired=true, IsKey=true, IsDefaultCollection=false)]
        public virtual string Key
        {
            get
            {
                return ((string)(base[global::ASoft.Configuration.SettingElement.KeyPropertyName]));
            }
            set
            {
                base[global::ASoft.Configuration.SettingElement.KeyPropertyName] = value;
            }
        }
        #endregion
        
        #region Value Property
        /// <summary>
        /// The XML name of the <see cref="Value"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        internal const string ValuePropertyName = "value";
        
        /// <summary>
        /// Gets or sets the Value.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.801")]
        [global::System.ComponentModel.DescriptionAttribute("The Value.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::ASoft.Configuration.SettingElement.ValuePropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual string Value
        {
            get
            {
                return ((string)(base[global::ASoft.Configuration.SettingElement.ValuePropertyName]));
            }
            set
            {
                base[global::ASoft.Configuration.SettingElement.ValuePropertyName] = value;
            }
        }
        #endregion
    }
}
